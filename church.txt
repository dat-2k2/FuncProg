church numerals

n f x - lambda -> lambdaf. lambdax. f^n x

operators:
succ := lambda n.lambda f.lambda x. f (n f x)
plus := lambda m. lambda n.lambdaf.lambdax. m f (n f x)

eg: plus 1 2
1. define 1 and 2 in CN: 1 := lambda s.lambda u. s u, 2 := succ 1
plus 1 2 
1 f (2 f x)
s u f ( f ( (s u) f s u))
s u f ( f ( f s u))
s u f3 s u
f3 s u 

f (n+1) x
combinator : lambda without free variables 
iszero =  lambda n.n(lambda c.false)true
pair = lambda x y f. f x y

boolean:
true = lambda x y. x
false = lambda x y.y
if = lambda p x y. p x y
not = lambda b. if p false true
and = lambda p q. if p q false (if p==true then true & q = q else false & q = false)
or = lambda p q. if p true q
xor = lambda p q if 

and true false

Fixed point (operator)
y f = f(yf)
lambda x. f(yf) 
(lambda x. f x)(lambda f. y)

OOP: 
data C = C {
    A:: C
  , B:: Int
}
constructor

monad: constructor+ return + bind
return :: a -> M a := return a but "casted" into monad
bind :: (M a) -> ( a-> M b) -> (M b) := 